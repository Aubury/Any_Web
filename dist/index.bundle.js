!function(n){function e(e){for(var t,a,c=e[0],s=e[1],l=e[2],u=0,p=[];u<c.length;u++)a=c[u],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&p.push(o[a][0]),o[a]=0;for(t in s)Object.prototype.hasOwnProperty.call(s,t)&&(n[t]=s[t]);for(d&&d(e);p.length;)p.shift()();return i.push.apply(i,l||[]),r()}function r(){for(var n,e=0;e<i.length;e++){for(var r=i[e],t=!0,c=1;c<r.length;c++){var s=r[c];0!==o[s]&&(t=!1)}t&&(i.splice(e--,1),n=a(a.s=r[0]))}return n}var t={},o={2:0},i=[];function a(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=n,a.c=t,a.d=function(n,e,r){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)a.d(r,t,function(e){return n[e]}.bind(null,t));return r},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="";var c=window.webpackJsonp=window.webpackJsonp||[],s=c.push.bind(c);c.push=e,c=c.slice();for(var l=0;l<c.length;l++)e(c[l]);var d=s;i.push([9,0]),r()}([,function(n,e,r){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r=function(n,e){var r=n[1]||"",t=n[3];if(!t)return r;if(e&&"function"==typeof btoa){var o=(a=t,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot).concat(n," */")}));return[r].concat(i).concat([o]).join("\n")}var a,c,s;return[r].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(n,r){"string"==typeof n&&(n=[[null,n,""]]);for(var t=0;t<n.length;t++){var o=[].concat(n[t]);r&&(o[2]?o[2]="".concat(r," and ").concat(o[2]):o[2]=r),e.push(o)}},e}},,,function(n,e,r){var t=r(5),o=r(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1},a=(t(n.i,o,i),o.locals?o.locals:{});n.exports=a},function(n,e,r){"use strict";var t,o=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},i=function(){var n={};return function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}n[e]=r}return n[e]}}(),a={};function c(n,e,r){for(var t=0;t<e.length;t++){var o={css:e[t][1],media:e[t][2],sourceMap:e[t][3]};a[n][t]?a[n][t](o):a[n].push(h(o,r))}}function s(n){var e=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var o=r.nc;o&&(t.nonce=o)}if(Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(e);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,d=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function u(n,e,r,t){var o=r?"":t.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function p(n,e,r){var t=r.css,o=r.media,i=r.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var f=null,m=0;function h(n,e){var r,t,o;if(e.singleton){var i=m++;r=f||(f=s(e)),t=u.bind(null,r,i,!1),o=u.bind(null,r,i,!0)}else r=s(e),t=p.bind(null,r,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)};return t(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t(n=e)}else o()}}n.exports=function(n,e,r){return(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=o()),n=r.base?n+r.base:n,e=e||[],a[n]||(a[n]=[]),c(n,e,r),function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){a[n]||(a[n]=[]),c(n,e,r);for(var t=e.length;t<a[n].length;t++)a[n][t]();a[n].length=e.length,0===a[n].length&&delete a[n]}}}},function(n,e,r){var t=r(1),o=r(7);(e=t(!1)).i(o),e.push([n.i,"*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n.color{\r\n    color: red;\r\n}\r\n.displayCenter{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    align-items: center;\r\n    align-content: center;\r\n}\r\n.none{\r\n     display: none;\r\n }\r\n\r\n/*-----------------------------------------------------------------------------------------------*/\r\n@media screen and (max-width: 600px) {\r\n    .slid{\r\n        font-size: 5em !important;\r\n    }\r\n    .divArrowDown {\r\n        top: calc(100vh - (3em + 2em))\r\n    }\r\n}\r\n\r\n",""]),n.exports=e},function(n,e,r){(e=r(1)(!1)).push([n.i,"/*-----------------------Slider---------------------------------------------------*/\r\n.slid{\r\n    width: 100vw !important;\r\n    position: absolute;\r\n    top: 0;\r\n    left:0;\r\n    font-size: 10em;\r\n}\r\n\r\n.slid1{\r\n    background-color: #000068;\r\n    color: aliceblue;\r\n}\r\n.slid2{\r\n    background-color: rgba(67, 61, 154, 1);\r\n}\r\n.slid3{\r\n    background-color: #7df0c8;\r\n\r\n}\r\n.container {\r\n    height: 100vh !important;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n@keyframes slidDown{\r\n    0%{\r\n        top: 0;\r\n    }\r\n    40%{\r\n        top:40vh;\r\n    }\r\n    60%{\r\n        top:40vh;\r\n    }\r\n\r\n    100% {\r\n        top:100vh;\r\n    }\r\n}\r\n@keyframes slidUp{\r\n    from {\r\n        top: 100vh;\r\n    }\r\n    100% {\r\n        top:0;\r\n    }\r\n}\r\n.down{\r\n    top: 100vh;\r\n    animation: 2s ease-in-out slidDown;\r\n}\r\n.up{\r\n    top: 0;\r\n    animation: 1s ease-in-out slidUp;\r\n}\r\n.show {\r\n    z-index: 9;\r\n    position: fixed;\r\n\r\n}\r\n/*----------------------------Arrow------------------------------------------------------*/\r\n.divArrowUP{\r\n    position: absolute;\r\n    width: 3em;\r\n    height: 3em;\r\n    padding: 2px 2px 8px 2px !important;\r\n    top:.5em;\r\n    left: calc((100vw/2) - (3em/2));\r\n    background-color: rgba(240, 248, 255, 0.4);\r\n    border-radius: 50%;\r\n    z-index: 99;\r\n    outline:none;\r\n}\r\n.divArrowDown{\r\n    position: absolute;\r\n    width: 3em;\r\n    height: 3em;\r\n    padding: 8px 2px 2px 2px !important;\r\n    top: calc(100% - (3em + 2em));\r\n    left: calc((100vw/2) - (3em/2));\r\n    background-color: rgba(240, 248, 255, 0.4);\r\n    border-radius: 50%;\r\n    z-index: 99;\r\n    outline:none;\r\n\r\n\r\n}\r\n.divArrowDown img{\r\n    height: 80%;\r\n    width: 80%;\r\n    transform: rotate(180deg);\r\n}\r\n.divArrowUP img{\r\n    height: 80%;\r\n    width: 80%;\r\n}\r\n.divArrowDown:hover,\r\n.divArrowUP:hover{\r\n    cursor: pointer;\r\n    width: 3.5em;\r\n    height: 3.5em;\r\n    background-color: rgba(240, 248, 255, 0.5);\r\n}",""]),n.exports=e},,function(n,e,r){"use strict";r.r(e);r(0),r(4);var t=r.p+"dist/img/arrow640.png";const o=document.createElement("div");o.classList.add("slid","slid1","show","displayCenter"),o.style.height=document.documentElement.clientHeight+"px",o.innerHTML="<p>SLID 1</p>";var i=o;const a=document.createElement("div");a.classList.add("slid","slid2","displayCenter"),a.style.height=document.documentElement.clientHeight+"px",a.innerHTML="<p>SLID 2</p>";var c=a;const s=document.createElement("div");s.classList.add("slid","slid3","displayCenter"),s.style.height=document.documentElement.clientHeight+"px",s.innerHTML="<p>SLID 3</p>";var l=s;const d=document.createElement("div");d.classList.add("slid","slid1","displayCenter"),d.style.height=document.documentElement.clientHeight+"px",d.innerHTML="<p>SLID 4</p>";var u=d;function p(n){const e=document.querySelector(".divArrowUP"),r=document.querySelector(".divArrowDown");return!!n.classList.contains("show")&&(n.nextElementSibling&&n.nextElementSibling!==e?(n.classList.remove("show","up"),n.nextElementSibling.classList.remove("down"),n.nextElementSibling.classList.add("show","up"),r.classList.remove("none")):e.classList.add("none"),!0)}function f(n){const e=document.querySelector(".divArrowUP"),r=document.querySelector(".divArrowDown");return!!n.classList.contains("show")&&(n.previousElementSibling&&n.previousElementSibling!==r?(e.classList.remove("none"),n.classList.remove("show","up"),n.classList.add("down"),setTimeout(()=>{n.previousElementSibling.classList.add("show")},2e3)):r.classList.add("none"),!0)}function m(){const n=document.querySelectorAll(".slid"),e=n.length;for(let r=0;r<e;r++)if(p(n[r]))return}function h(){const n=document.querySelectorAll(".slid"),e=n.length;for(let r=0;r<e;r++)if(f(n[r]))return}document.addEventListener("keydown",(function(n){"ArrowDown"===n.code&&h(),"ArrowUp"===n.code&&m()})),window.onwheel=function(n){(n.deltaY||n.detail||n.wheelDelta)>0?p(n.target):function(n){f(n.target)}(n)},function(){const n=document.createElement("div");n.classList.add("container"),n.appendChild(u),n.appendChild(l),n.appendChild(c),n.appendChild(i),document.body.appendChild(n)}(),function(){const n=document.createElement("div"),e=document.createElement("div"),r=document.querySelector(".container"),o=new Image,i=new Image;o.src=t,o.alt="arrowUp",n.classList.add("divArrowUP","displayCenter","none"),n.appendChild(o),i.src=t,i.alt="arrowDown",e.classList.add("divArrowDown","displayCenter"),e.appendChild(i),r.appendChild(n),r.appendChild(e),o.addEventListener("click",m),i.addEventListener("click",h)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,