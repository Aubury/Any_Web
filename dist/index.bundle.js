!function(n){function e(e){for(var r,s,a=e[0],l=e[1],c=e[2],u=0,p=[];u<a.length;u++)s=a[u],Object.prototype.hasOwnProperty.call(o,s)&&o[s]&&p.push(o[s][0]),o[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(d&&d(e);p.length;)p.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,a=1;a<t.length;a++){var l=t[a];0!==o[l]&&(r=!1)}r&&(i.splice(e--,1),n=s(s.s=t[0]))}return n}var r={},o={2:0},i=[];function s(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=n,s.c=r,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)s.d(t,r,function(e){return n[e]}.bind(null,r));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="";var a=window.webpackJsonp=window.webpackJsonp||[],l=a.push.bind(a);a.push=e,a=a.slice();for(var c=0;c<a.length;c++)e(a[c]);var d=l;i.push([9,0]),t()}([,function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot).concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}var s,a,l;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r=0;r<n.length;r++){var o=[].concat(n[r]);t&&(o[2]?o[2]="".concat(t," and ").concat(o[2]):o[2]=t),e.push(o)}},e}},,,function(n,e,t){var r=t(5),o=t(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1},s=(r(n.i,o,i),o.locals?o.locals:{});n.exports=s},function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),s={};function a(n,e,t){for(var r=0;r<e.length;r++){var o={css:e[r][1],media:e[r][2],sourceMap:e[r][3]};s[n][r]?s[n][r](o):s[n].push(h(o,t))}}function l(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var s=i(n.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,d=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function u(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var i=document.createTextNode(o),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(i,s[e]):n.appendChild(i)}}function p(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,m=0;function h(n,e){var t,r,o;if(e.singleton){var i=m++;t=f||(f=l(e)),r=u.bind(null,t,i,!1),o=u.bind(null,t,i,!0)}else t=l(e),r=p.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e,t){return(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o()),n=t.base?n+t.base:n,e=e||[],s[n]||(s[n]=[]),a(n,e,t),function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){s[n]||(s[n]=[]),a(n,e,t);for(var r=e.length;r<s[n].length;r++)s[n][r]();s[n].length=e.length,0===s[n].length&&delete s[n]}}}},function(n,e,t){var r=t(1),o=t(7);(e=r(!1)).i(o),e.push([n.i,"*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n.color{\r\n    color: red;\r\n}\r\n.displayCenter{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    align-items: center;\r\n    align-content: center;\r\n}\r\n.none{\r\n     display: none;\r\n }\r\n/*----------------------------------------------------------------------------------------------*/\r\n.menu-btn {\r\n    position: absolute;\r\n    z-index: 10;\r\n    top: 0;\r\n    left: 0;\r\n    height: 70px;\r\n    width: 54px;\r\n    cursor: pointer;\r\n    background: url(https://iamturner.co.uk/codepen/menu-icon.png) no-repeat center;\r\n    background-size: 44px;\r\n}\r\n.menuOpen{\r\n    align-items: normal !important;\r\n    align-content: normal !important;\r\n    /*font-size: 4em !important;*/\r\n    /*border-radius: 8px 8px 0 0;*/\r\n    /*transition: transform 0.3s;*/\r\n}\r\n/*-----------------------------------------------------------------------------------------------*/\r\n@media screen and (max-width: 600px) {\r\n\r\n    /*.divArrowDown {*/\r\n    /*    top: calc(100vh - (3em + 2em))*/\r\n    /*}*/\r\n}\r\n\r\n",""]),n.exports=e},function(n,e,t){(e=t(1)(!1)).push([n.i,"/*-----------------------Slider---------------------------------------------------*/\r\nh1{\r\n    cursor: pointer;\r\n}\r\n.slid{\r\n    width: 100vw !important;\r\n    height: 100% !important;\r\n    position: absolute;\r\n    top: 0;\r\n    left:0;\r\n    transition: transform 0.4s;\r\n}\r\n\r\n.slid1{\r\n    background-color: #000068;\r\n    color: aliceblue;\r\n    transition-delay: 0.15s;\r\n}\r\n.slid2{\r\n    background-color: rgba(67, 61, 154, 1);\r\n    transition-delay: 0.1s;\r\n\r\n}\r\n.slid3{\r\n    background-color: #7df0c8;\r\n    transition-delay: 0.05s;\r\n\r\n}\r\n.slid4{\r\n    background-color: #000068;\r\n    color: aliceblue;\r\n    transition-delay: 0s;\r\n\r\n}\r\n.container {\r\n    height: 100vh !important;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n@keyframes slidDown{\r\n    0%{\r\n        top: 0;\r\n    }\r\n    40%{\r\n        top:40vh;\r\n    }\r\n    60%{\r\n        top:40vh;\r\n    }\r\n\r\n    100% {\r\n        top:100vh;\r\n    }\r\n}\r\n@keyframes slidUp{\r\n    from {\r\n        top: 100vh;\r\n    }\r\n    100% {\r\n        top:0;\r\n    }\r\n}\r\n.down{\r\n    top: 100vh;\r\n    animation: 2s ease-in-out slidDown;\r\n}\r\n.up{\r\n    top: 0;\r\n    animation: 1s ease-in-out slidUp;\r\n}\r\n.show {\r\n    z-index: 9;\r\n    position: fixed;\r\n\r\n}\r\n/*----------------------------Arrow------------------------------------------------------*/\r\n/*.divArrowUP{*/\r\n/*    position: absolute;*/\r\n/*    width: 3em;*/\r\n/*    height: 3em;*/\r\n/*    padding: 2px 2px 8px 2px !important;*/\r\n/*    top:.5em;*/\r\n/*    left: calc((100vw/2) - (3em/2));*/\r\n/*    background-color: rgba(240, 248, 255, 0.4);*/\r\n/*    border-radius: 50%;*/\r\n/*    z-index: 99;*/\r\n/*    outline:none;*/\r\n/*}*/\r\n/*.divArrowDown{*/\r\n/*    position: absolute;*/\r\n/*    width: 3em;*/\r\n/*    height: 3em;*/\r\n/*    padding: 8px 2px 2px 2px !important;*/\r\n/*    top: calc(100% - (3em + 2em));*/\r\n/*    left: calc((100vw/2) - (3em/2));*/\r\n/*    background-color: rgba(240, 248, 255, 0.4);*/\r\n/*    border-radius: 50%;*/\r\n/*    z-index: 99;*/\r\n/*    outline:none;*/\r\n\r\n\r\n/*}*/\r\n/*.divArrowDown img{*/\r\n/*    height: 80%;*/\r\n/*    width: 80%;*/\r\n/*    transform: rotate(180deg);*/\r\n/*}*/\r\n/*.divArrowUP img{*/\r\n/*    height: 80%;*/\r\n/*    width: 80%;*/\r\n/*}*/\r\n/*.divArrowDown:hover,*/\r\n/*.divArrowUP:hover{*/\r\n/*    cursor: pointer;*/\r\n/*    width: 3.5em;*/\r\n/*    height: 3.5em;*/\r\n/*    background-color: rgba(240, 248, 255, 0.5);*/\r\n/*}*/",""]),n.exports=e},,function(n,e,t){"use strict";t.r(e);t(0),t(4);const r=document.createElement("div");r.classList.add("slid","slid1","show","displayCenter"),r.style.height=document.documentElement.clientHeight+"px",r.innerHTML="<h1>Главная</h1>",r.id="Main";var o=r;const i=document.createElement("div");i.classList.add("slid","slid2","displayCenter"),i.style.height=document.documentElement.clientHeight+"px",i.innerHTML="<h1>О нас</h1>",i.id="About Us";var s=i;const a=document.createElement("div");a.classList.add("slid","slid3","displayCenter"),a.style.height=document.documentElement.clientHeight+"px",a.innerHTML="<h1>Наши работы</h1>",a.id="Our work";var l=a;const c=document.createElement("div");c.classList.add("slid","slid4","displayCenter"),c.style.height=document.documentElement.clientHeight+"px",c.innerHTML="<h1>Контакты</h1>",c.id="Contacts";var d=c;const u={container:document.querySelector(".container"),menuButton:document.querySelector(".menu-btn"),massSlides:[]};function p(n){return!(!n.classList.contains("show")||!n.nextElementSibling||n.nextElementSibling===u.menuButton)&&(n.classList.remove("show","up"),n.nextElementSibling.classList.remove("down"),n.nextElementSibling.classList.add("show","up"),!0)}function f(n){return!(!n.classList.contains("show")||!n.previousElementSibling||n.previousElementSibling===u.menuButton)&&(n.classList.remove("show","up"),n.classList.add("down"),setTimeout(()=>{n.previousElementSibling.classList.add("show")},2e3),!0)}function m(){const n=u.massSlides,e=n.length;for(let t=0;t<e;t++)if(p(n[t]))return}function h(){const n=u.massSlides,e=n.length;for(let t=0;t<e;t++)if(f(n[t]))return}function v(n){"ArrowDown"===n.code&&h(),"ArrowUp"===n.code&&m()}function g(n){(n.deltaY||n.detail)>0?m():h()}function b(){document.addEventListener("keydown",v),window.addEventListener("wheel",g)}function w(n){let e=u.massSlides,t=this.id;for(let n=e.length-1;n>0;n--)e[n].id!==t?(e[n].classList.contains("show")&&e[n].previousElementSibling&&e[n].previousElementSibling!==u.menuButton&&(e[n].classList.remove("show","up"),e[n].classList.add("down"),e[n].previousElementSibling.classList.add("show")),e[n].style.borderRadius="0",e[n].style.transform="none"):(e[n].style.transform="none",e[n].style.borderRadius="0");b()}u.menuButton.addEventListener("click",(function(){const n=u.massSlides,e=n.length;let t=0;n.forEach(n=>{p(n)});for(let r=0;r<e;r++)n[r].style.transform&&"none"!==n[r].style.transform?(n[r].style.transform="none",n[r].classList.remove("menuOpen"),n[r].style.borderRadius="0",b(),n[r].removeEventListener("click",w)):(r&&(t+=80,n[r].style.borderRadius="8px 8px 0 0",n[r].style.transform=`translateY(${t}px)`),n[r].classList.add("menuOpen"),n[r].addEventListener("click",w),document.removeEventListener("keydown",v),window.removeEventListener("wheel",g))})),function(){const n=u.container;n.appendChild(d),n.appendChild(l),n.appendChild(s),n.appendChild(o),u.massSlides=n.querySelectorAll(".slid")}(),function(){const n=u.container;n.addEventListener("touchstart",(function(n){e=n.touches[0].clientX,t=n.touches[0].clientY}),!1),n.addEventListener("touchmove",(function(n){if(null===e)return;if(null===t)return;let r=n.touches[0].clientX,o=n.touches[0].clientY,i=e-r,s=t-o;Math.abs(i)>Math.abs(s)||(s>0?m():h());e=null,t=null,n.preventDefault()}),!1);let e=null,t=null}(),b()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,